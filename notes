<!-- Data modelling - Taking unstructured data generated by a real world scenarion
and then structuring it into a logical data model in a database. 

///// Types of relationships between data /////// 
1. One to one - one movie can only have one name 
2. one to many -- one to few - a movie can win some award 
              -- one to many -a movie can have many reviews 
              -- one to a ton - an app can have a ton of logs
3. Many to many - a movie can have many actors and many actors can be in                one movie 


///// Referencing vs Embedding /////
Referencing - the two or more related data sets are kept separate
        ---Child referencing -> id of the parent are kept in the child, and all the ids of children are kept in an array in the parent
        --- Parent referencing -> id of the parent are kept in the child but no array of children is kept in the parent
        ---- Two way referencing -> a child has the ids of all its parents and the parent has ids of all its children


  Advantage: Easier to query each document on itw own
  Disadvantage: 2 queries are needed for getting data from referenced   object

Embedding - all related data sets are embedded in one main document
Advantage: only 1 query is required to get all the required info
Disadvantage: Impossible to query embedded document on its own

When to Embed or to reference
1. Relationship type: 1 to 1 -> Embed
                      1 to many -> Embed/reference
                      1 to few -> Embed
                      1 to a ton -> Reference

2. Data access patterns: data is not updated a lot -> Embed
                         data is mostly read -> Embed
                         data is not updated a lot -> Reference
                         data is mostly written -> Reference

3. Data closeness: Data is closely related -> Embed
                  both data sets are frequently queried separately -> Reference

Do not allow arrays to grow indefinetly, one to a ton relationships should use parent referencing, use child referencing for one to many relationships
-->
